AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Webhook Explorer
Parameters:
  WebhookDomainName:
    Type: String
  WebhookHostedZoneId:
    Type: AWS::Route53::HostedZone::Id
  WebhookExplorerAuthDomainName:
    Type: String
  WebhookExplorerDomainName:
    Type: String
  WebhookExplorerHostedZoneId:
    Type: AWS::Route53::HostedZone::Id
  AdminEmailAddress:
    Type: String
Mappings:
  S3WebsiteHostedZoneIds:
    us-east-2:
      HostedZoneId: Z2O1EMRO9K5GLX
    us-east-1:
      HostedZoneId: Z3AQBSTGFYJSTF 
    us-west-1:
      HostedZoneId: Z2F56UZL2M1ACD 
    us-west-2:
      HostedZoneId: Z3BJ6K6RIION7M
    ap-east-1:
      HostedZoneId: ZNB98KWMFR0R6
    ap-south-1:
      HostedZoneId: Z11RGJOFQNVJUP
    ap-northeast-3:
      HostedZoneId: Z2YQB5RD63NC85
    ap-northeast-2:
      HostedZoneId: Z3W03O7B5YMIYP
    ap-southeast-1:
      HostedZoneId: Z3O0J2DXBE1FTB
    ap-southeast-2:
      HostedZoneId: Z1WCIGYICN2BYD
    ap-northeast-1:
      HostedZoneId: Z2M4EHUR26P7ZW
    ca-central-1:
      HostedZoneId: Z1QDHH18159H29
    eu-central-1:
      HostedZoneId: Z21DNDUVLTQW6Q
    eu-west-1:
      HostedZoneId: Z1BKCTXD74EZPE
    eu-west-2:
      HostedZoneId: Z3GKZC51ZF0DB4
    eu-west-3:
      HostedZoneId: Z3R1K369G5AVDG
    eu-north-1:
      HostedZoneId: Z3BAZG2TWCNX0D
    sa-east-1:
      HostedZoneId: Z7KQH4QJS55SO
    me-south-1:
      HostedZoneId: Z1MPMWCPA7YB62
Resources:
  WebhookApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: webhook-api
        basePath: "/"
        schemes:
          - "http"
          - "https"
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
                - "application/json"
              parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebhookHandler.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
  WebhookHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: lambdas/webhook-handler.handler
      MemorySize: 512
      Timeout: 10
      AutoPublishAlias: live
      Events:
        WebhookApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: "*"
            RestApiId: !Ref WebhookApi
      Environment:
        Variables:
          BUCKET_NAME: !Ref WebhookRequestBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref WebhookRequestBucket
  WebhookHandlerPermissionFix:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebhookHandler
      Principal: apigateway.amazonaws.com
  CustomCertificateCreator:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: lambdas/custom-certificate-creator.handler
      MemorySize: 512
      Timeout: 600
      AutoPublishAlias: live
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - acm:DescribeCertificate
              - acm:DeleteCertificate
              - acm:RequestCertificate
            Resource: "*"
        - Statement:
          - Effect: Allow
            Action:
              - route53:*
            Resource: !Sub "arn:${AWS::Partition}:route53:::hostedzone/${WebhookHostedZoneId}"
  Certificate:
    Type: 'Custom::CertificateCreator'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt CustomCertificateCreator.Arn
      HostedZoneId: !Ref WebhookHostedZoneId
      DomainName: !Ref WebhookDomainName
  WebhookDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref WebhookDomainName
      RegionalCertificateArn: !Ref Certificate
      EndpointConfiguration:
        Types:
          - "REGIONAL"
  WebhookDomainMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref WebhookDomain
      RestApiId: !Ref WebhookApi
      Stage: prod
  WebhookRequestBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-webhook-reqs"
  WebhookDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties: 
      Comment: "DNS for Webhook API"
      HostedZoneId: !Ref WebhookHostedZoneId
      RecordSets: 
        - Name: !Ref WebhookDomain
          Type: "A"
          AliasTarget:
            DNSName: !GetAtt WebhookDomain.RegionalDomainName
            HostedZoneId: !GetAtt WebhookDomain.RegionalHostedZoneId
  WebhookExplorerUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailSubject: "You're invited to Webhook Explorer"
          EmailMessage: !Sub "Welcome to Webhook Explorer.  You can log in at ${WebhookExplorerDomainName} with username \"{username}\"  and password \"{####}\"."
      AliasAttributes:
        - email
        - preferred_username
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
        ReplyToEmailAddress: "adam.g.berger@gmail.com"
      Schema:
        - AttributeDataType: String
          Name: tenant_role
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
  WebhookExplorerApp:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: WebhookExplorer
      UserPoolId: !Ref WebhookExplorerUserPool
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub "https://${WebhookExplorerDomainName}/"
  WebhookExplorerCertificate:
    Type: 'Custom::CertificateCreator'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt CustomCertificateCreator.Arn
      HostedZoneId: !Ref WebhookExplorerHostedZoneId
      DomainName: !Ref WebhookExplorerAuthDomainName
  CustomCognitoDomainCreator:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: lambdas/custom-cognito-domain.handler
      MemorySize: 512
      Timeout: 600
      AutoPublishAlias: live
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolDomain
              - cognito-idp:DeleteUserPoolDomain
              - cognito-idp:CreateUserPoolDomain
            Resource: !GetAtt WebhookExplorerUserPool.Arn
          - Effect: Allow
            Action:
              - cloudfront:UpdateDistribution
            Resource: "*"
  CustomCognitoDomain:
    Type: 'Custom::CustomCognitoDomainCreator'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt CustomCognitoDomainCreator.Arn
      UserPoolId: !Ref WebhookExplorerUserPool
      Domain: !Ref WebhookExplorerAuthDomainName
      CertificateArn: !Ref WebhookExplorerCertificate
  CognitoDomainDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties: 
      Comment: "DNS for Cognito Auth"
      HostedZoneId: !Ref WebhookExplorerHostedZoneId
      RecordSets: 
        - Name: !Ref WebhookExplorerAuthDomainName
          Type: "A"
          AliasTarget:
            DNSName: !Ref CustomCognitoDomain
            HostedZoneId: Z2FDTNDATAQYW2
  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref WebhookExplorerUserPool
      DesiredDeliveryMediums:
        - EMAIL
      ForceAliasCreation: true
      Username: !Select [0, !Split ["@", !Ref AdminEmailAddress]]
      UserAttributes:
        - Name: email
          Value: !Ref AdminEmailAddress
        - Name: email_verified
          Value: true
  WebhookExplorerBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref WebhookExplorerDomainName
      AccessControl: PublicRead
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
  WebhookExplorerDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties: 
      Comment: "DNS for Webhook Explorer"
      HostedZoneId: !Ref WebhookExplorerHostedZoneId
      RecordSets:
        - Name: !Ref WebhookExplorerDomainName
          Type: "A"
          AliasTarget:
            DNSName: !Sub "s3-website-${AWS::Region}.amazonaws.com"
            HostedZoneId: !FindInMap ["S3WebsiteHostedZoneIds", !Ref "AWS::Region", "HostedZoneId"]
