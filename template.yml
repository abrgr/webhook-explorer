AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Webhook Explorer
Parameters:
  WebhookDomainName:
    Type: String
  WebhookHostedZoneId:
    Type: AWS::Route53::HostedZone::Id
  WebhookExplorerAuthDomainName:
    Type: String
  WebhookExplorerDomainName:
    Type: String
  WebhookExplorerHostedZoneId:
    Type: AWS::Route53::HostedZone::Id
  AdminEmailAddress:
    Type: String
Mappings:
  S3WebsiteHostedZoneIds:
    us-east-2:
      HostedZoneId: Z2O1EMRO9K5GLX
    us-east-1:
      HostedZoneId: Z3AQBSTGFYJSTF 
    us-west-1:
      HostedZoneId: Z2F56UZL2M1ACD 
    us-west-2:
      HostedZoneId: Z3BJ6K6RIION7M
    ap-east-1:
      HostedZoneId: ZNB98KWMFR0R6
    ap-south-1:
      HostedZoneId: Z11RGJOFQNVJUP
    ap-northeast-3:
      HostedZoneId: Z2YQB5RD63NC85
    ap-northeast-2:
      HostedZoneId: Z3W03O7B5YMIYP
    ap-southeast-1:
      HostedZoneId: Z3O0J2DXBE1FTB
    ap-southeast-2:
      HostedZoneId: Z1WCIGYICN2BYD
    ap-northeast-1:
      HostedZoneId: Z2M4EHUR26P7ZW
    ca-central-1:
      HostedZoneId: Z1QDHH18159H29
    eu-central-1:
      HostedZoneId: Z21DNDUVLTQW6Q
    eu-west-1:
      HostedZoneId: Z1BKCTXD74EZPE
    eu-west-2:
      HostedZoneId: Z3GKZC51ZF0DB4
    eu-west-3:
      HostedZoneId: Z3R1K369G5AVDG
    eu-north-1:
      HostedZoneId: Z3BAZG2TWCNX0D
    sa-east-1:
      HostedZoneId: Z7KQH4QJS55SO
    me-south-1:
      HostedZoneId: Z1MPMWCPA7YB62
Resources:
  WebhookApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: webhook-api
        basePath: "/"
        schemes:
          - "http"
          - "https"
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
                - "application/json"
              parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebhookHandler.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
  WebhookHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: lambdas/webhook-handler.handler
      MemorySize: 512
      Timeout: 10
      AutoPublishAlias: live
      Events:
        WebhookApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: "*"
            RestApiId: !Ref WebhookApi
      Environment:
        Variables:
          BUCKET_NAME: !Ref WebhookRequestBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref WebhookRequestBucket
  WebhookHandlerPermissionFix:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebhookHandler
      Principal: apigateway.amazonaws.com
  CustomCertificateCreator:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: lambdas/custom-certificate-creator.handler
      MemorySize: 512
      Timeout: 600
      AutoPublishAlias: live
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - acm:DescribeCertificate
              - acm:DeleteCertificate
              - acm:RequestCertificate
            Resource: "*"
        - Statement:
          - Effect: Allow
            Action:
              - route53:*
            Resource: !Sub "arn:${AWS::Partition}:route53:::hostedzone/${WebhookHostedZoneId}"
  Certificate:
    Type: 'Custom::CertificateCreator'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt CustomCertificateCreator.Arn
      HostedZoneId: !Ref WebhookHostedZoneId
      DomainName: !Ref WebhookDomainName
  WebhookDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref WebhookDomainName
      RegionalCertificateArn: !Ref Certificate
      EndpointConfiguration:
        Types:
          - "REGIONAL"
  WebhookDomainMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: WebhookApiprodStage
    Properties:
      DomainName: !Ref WebhookDomain
      RestApiId: !Ref WebhookApi
      Stage: prod
  WebhookRequestBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-webhook-reqs"
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: ["GET"]
            AllowedOrigins: ["*"]
            MaxAge: 300
  WebhookDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties: 
      Comment: "DNS for Webhook API"
      HostedZoneId: !Ref WebhookHostedZoneId
      RecordSets: 
        - Name: !Ref WebhookDomain
          Type: "A"
          AliasTarget:
            DNSName: !GetAtt WebhookDomain.RegionalDomainName
            HostedZoneId: !GetAtt WebhookDomain.RegionalHostedZoneId
  WebhookExplorerUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailSubject: "You're invited to Webhook Explorer"
          EmailMessage: !Sub "Welcome to Webhook Explorer.  You can log in at ${WebhookExplorerDomainName} with username \"{username}\"  and password \"{####}\"."
      AliasAttributes:
        - email
        - preferred_username
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
        ReplyToEmailAddress: "adam.g.berger@gmail.com"
      Schema:
        - AttributeDataType: String
          Name: tenant_role
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
  WebhookExplorerApp:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: WebhookExplorer
      UserPoolId: !Ref WebhookExplorerUserPool
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub "https://${WebhookExplorerDomainName}/"
      ReadAttributes:
        - email
        - email_verified
        - family_name
        - middle_name
        - given_name
        - locale
        - name
        - nickname
        - picture
        - preferred_username
        - profile
        - zoneinfo
        - updated_at
        - website
  WebhookExplorerAuthCertificate:
    Type: 'Custom::CertificateCreator'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt CustomCertificateCreator.Arn
      HostedZoneId: !Ref WebhookExplorerHostedZoneId
      DomainName: !Ref WebhookExplorerAuthDomainName
  WebhookExplorerCertificate:
    Type: 'Custom::CertificateCreator'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt CustomCertificateCreator.Arn
      HostedZoneId: !Ref WebhookExplorerHostedZoneId
      DomainName: !Ref WebhookExplorerDomainName
  CustomCognitoDomainCreator:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: lambdas/custom-cognito-domain.handler
      MemorySize: 512
      Timeout: 600
      AutoPublishAlias: live
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolDomain
              - cognito-idp:DeleteUserPoolDomain
              - cognito-idp:CreateUserPoolDomain
            Resource: !GetAtt WebhookExplorerUserPool.Arn
          - Effect: Allow
            Action:
              - cloudfront:UpdateDistribution
            Resource: "*"
  CustomCognitoDomain:
    Type: 'Custom::CustomCognitoDomainCreator'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt CustomCognitoDomainCreator.Arn
      UserPoolId: !Ref WebhookExplorerUserPool
      Domain: !Ref WebhookExplorerAuthDomainName
      CertificateArn: !Ref WebhookExplorerAuthCertificate
  CognitoDomainDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties: 
      Comment: "DNS for Cognito Auth"
      HostedZoneId: !Ref WebhookExplorerHostedZoneId
      RecordSets: 
        - Name: !Ref WebhookExplorerAuthDomainName
          Type: "A"
          AliasTarget:
            DNSName: !Ref CustomCognitoDomain
            HostedZoneId: Z2FDTNDATAQYW2
  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref WebhookExplorerUserPool
      DesiredDeliveryMediums:
        - EMAIL
      ForceAliasCreation: true
      Username: !Select [0, !Split ["@", !Ref AdminEmailAddress]]
      UserAttributes:
        - Name: email
          Value: !Ref AdminEmailAddress
        - Name: email_verified
          Value: true
  WebhookExplorerApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        Authorizers:
          CognitoAuth:
            UserPoolArn: !GetAtt WebhookExplorerUserPool.Arn
            Identity:
              Header: Authorization
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: webhook-explorer-api
        basePath: "/"
        schemes:
          - "https"
        paths:
          /api/reqs:
            get:
              responses: {}
              security:
                - CognitoAuth: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListRequestsHandler.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /api/tagged-reqs:
            post:
              responses: {}
              security:
                - CognitoAuth: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TagRequestHandler.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            get:
              responses: {}
              security:
                - CognitoAuth: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTaggedRequestsHandler.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /api/tags:
            get:
              responses: {}
              security:
                - CognitoAuth: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListTagsHandler.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
        securityDefinitions:
          CognitoAuth:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "cognito_user_pools"
            x-amazon-apigateway-authorizer:
              providerARNs:
                - !GetAtt WebhookExplorerUserPool.Arn
            type: "cognito_user_pools"
  ListRequestsHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: lambdas/list-requests-handler.handler
      MemorySize: 512
      Timeout: 10
      AutoPublishAlias: live
      Events:
        ListRequests:
          Type: Api
          Properties:
            Path: /api/reqs
            Method: get
            RestApiId: !Ref WebhookExplorerApi
      Environment:
        Variables:
          BUCKET_NAME: !Ref WebhookRequestBucket
          EXPECTED_AUD: !Ref WebhookExplorerApp
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref WebhookRequestBucket
  ListRequestsHandlerPermissionFix:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ListRequestsHandler
      Principal: apigateway.amazonaws.com
  TagRequestHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: lambdas/tag-request-handler.handler
      MemorySize: 512
      Timeout: 10
      AutoPublishAlias: live
      Events:
        ListRequests:
          Type: Api
          Properties:
            Path: /api/tagged-reqs
            Method: post
            RestApiId: !Ref WebhookExplorerApi
      Environment:
        Variables:
          BUCKET_NAME: !Ref WebhookRequestBucket
          EXPECTED_AUD: !Ref WebhookExplorerApp
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref WebhookRequestBucket
  TagRequestHandlerPermissionFix:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TagRequestHandler
      Principal: apigateway.amazonaws.com
  ListTaggedRequestsHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: lambdas/list-tagged-requests-handler.handler
      MemorySize: 512
      Timeout: 10
      AutoPublishAlias: live
      Events:
        ListRequests:
          Type: Api
          Properties:
            Path: /api/tagged-reqs
            Method: get
            RestApiId: !Ref WebhookExplorerApi
      Environment:
        Variables:
          BUCKET_NAME: !Ref WebhookRequestBucket
          EXPECTED_AUD: !Ref WebhookExplorerApp
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref WebhookRequestBucket
  ListTaggedRequestsHandlerPermissionFix:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ListTaggedRequestsHandler
      Principal: apigateway.amazonaws.com
  ListTagsHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      Handler: lambdas/list-tags-handler.handler
      MemorySize: 512
      Timeout: 10
      AutoPublishAlias: live
      Events:
        ListTags:
          Type: Api
          Properties:
            Path: /api/tags
            Method: get
            RestApiId: !Ref WebhookExplorerApi
      Environment:
        Variables:
          BUCKET_NAME: !Ref WebhookRequestBucket
          EXPECTED_AUD: !Ref WebhookExplorerApp
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref WebhookRequestBucket
  ListTagsHandlerPermissionFix:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ListTagsHandler
      Principal: apigateway.amazonaws.com
  WebhookExplorerOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Permit webhook explorer static asset serving
  WebhookExplorerBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: WebhookExplorerOriginAccessIdentity
    Properties:
      Bucket: !Ref WebhookRequestBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${WebhookRequestBucket}/_web/*"
            Principal:
              CanonicalUser: !GetAtt WebhookExplorerOriginAccessIdentity.S3CanonicalUserId
          - Action:
              - "s3:ListBucket"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${WebhookRequestBucket}"
            Condition:
              StringEquals:
                "s3:prefix": "_web/"
            Principal:
              CanonicalUser: !GetAtt WebhookExplorerOriginAccessIdentity.S3CanonicalUserId
  WebhookExplorerDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - WebhookExplorerApi
      - WebhookExplorerOriginAccessIdentity
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref WebhookExplorerDomainName
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: static
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          DefaultTTL: 0
          MaxTTL: 60
        CacheBehaviors:
          - TargetOriginId: api
            PathPattern: "/api/*"
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            Compress: true
            ForwardedValues:
              Headers:
                - Accept
                - Referer
                - Authorization
                - Content-Type
              Cookies:
                Forward: all
              QueryString: true
            ViewerProtocolPolicy: redirect-to-https
            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 60
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: static
            DomainName: !Sub "${WebhookRequestBucket}.s3.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${WebhookExplorerOriginAccessIdentity}"
            OriginPath: /_web
          - Id: api
            DomainName: !Sub "${WebhookExplorerApi}.execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
            OriginPath: /prod
        ViewerCertificate:
          AcmCertificateArn: !Ref WebhookExplorerCertificate
          SslSupportMethod: sni-only
  WebhookExplorerDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties: 
      Comment: "DNS for Webhook Explorer"
      HostedZoneId: !Ref WebhookExplorerHostedZoneId
      RecordSets: 
        - Name: !Ref WebhookExplorerDomainName
          Type: "A"
          AliasTarget:
            DNSName: !GetAtt WebhookExplorerDistribution.DomainName
            HostedZoneId: Z2FDTNDATAQYW2
